name: pkgsrc Libero GNU/Linux

on:
  workflow_dispatch:

jobs:
  build:
    name: Build pkgsrc (${{ matrix.category }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        category:
          - archivers
          - audio
          - benchmarks
          - cad
          - chat
          - converters
          - databases
          - devel
          - editors
          - emulators
          - fonts
          - games
          - geography
          - graphics
          - ham
          - lang
          - mail
          - math
          - misc
          - multimedia
          - net
          - news
          - pkgtools
          - print
          - security
          - shells
          - sysutils
          - textproc
          - time
          - www
          - x11

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build essentials and multilib for i386
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc-multilib \
            g++-multilib \
            make \
            bmake \
            git \
            curl \
            pkg-config \
            libssl-dev:i386 \
            zlib1g-dev:i386 \
            libbz2-dev:i386 \
            libc6-dev-i386 \
            ca-certificates \
            wget \
            tar \
            bash \
            ccache \
            rsync

      - name: Download pkgsrc 2025Q3
        run: |
          wget https://cdn.netbsd.org/pub/pkgsrc/pkgsrc-2025Q3/pkgsrc-2025Q3.tar.gz
          sudo tar -xzf pkgsrc-2025Q3.tar.gz -C /usr

      - name: Create pbulk user
        run: |
          sudo useradd -m -s /bin/sh pbulk || true

      - name: Create mk.conf fragment for pbulk
        run: |
          cat > /tmp/mk.conf.frag << 'EOF'
          # Use gcc as compiler
          PKGSRC_COMPILER= gcc

          # Add multilib / 32-bit-specific flags
          CFLAGS+=      -m32 -march=i586 -mtune=i586
          CPPFLAGS+=    -m32 -march=i586 -mtune=i586
          CXXFLAGS+=    -m32 -march=i586 -mtune=i586
          LDFLAGS+=     -m32 -march=i586 -mtune=i586

          # Force ABI and machine arch
          ABI=32
          MACHINE_ARCH= i386

          # Prefer pkgsrc-built tools
          PREFER_PKGSRC= yes

          # Allow vulnerable packages and skip license checks for CI
          ALLOW_VULNERABLE_PACKAGES= yes
          SKIP_LICENSE_CHECK= yes

          # Build directories
          WRKOBJDIR= /tmp/pkgsrc-build
          DISTDIR= /tmp/pkgsrc-distfiles
          PACKAGES= /usr/pkg/packages

          # Parallel builds
          MAKE_JOBS= 4

          EOF

      - name: Deploy and configure pbulk using pbulk.sh
        run: |
          cd /usr/pkgsrc/mk/pbulk
          # Use -n for native make, -l for limited build, -c for mk.conf fragment
          sudo sh pbulk.sh -nlc /tmp/mk.conf.frag

      - name: Create package list for category
        run: |
          # Create list of packages in the specified category
          cd /usr/pkgsrc/${{ matrix.category }}
          ls -d */ 2>/dev/null | sed 's|/$||' | grep -v CVS | \
            awk -v cat="${{ matrix.category }}" '{print cat "/" $1}' | \
            sudo tee /usr/pbulk/etc/pbulk.list
          
          echo "Packages to build:"
          cat /usr/pbulk/etc/pbulk.list

      - name: Configure pbulk.conf for better stability
        run: |
          # Add resource limits to avoid hangs
          sudo sed -i '1i\
          ulimit -t 1800\
          ulimit -v 2097152' /usr/pbulk/etc/pbulk.conf
          
          echo "pbulk.conf contents:"
          sudo cat /usr/pbulk/etc/pbulk.conf

      - name: Create work directories
        run: |
          sudo mkdir -p /tmp/pkgsrc-build /tmp/pkgsrc-distfiles /usr/pkg/packages
          sudo chown -R pbulk:pbulk /tmp/pkgsrc-build /tmp/pkgsrc-distfiles /usr/pkg/packages
          sudo chmod 1777 /tmp/pkgsrc-build /tmp/pkgsrc-distfiles

      - name: Run pbulk bulk build
        run: |
          # Run bulkbuild as root (pbulk.sh should have set things up)
          sudo /usr/pbulk/bin/bulkbuild 2>&1 | tee /tmp/bulkbuild.log || {
            echo "Build failed or partially completed"
            echo "Last 100 lines of build log:"
            tail -100 /tmp/bulkbuild.log
            # Don't fail the job - we want to collect whatever was built
            true
          }

      - name: Show build summary
        if: always()
        run: |
          echo "=== Build Summary ==="
          if [ -f /usr/pbulk/bulklog/meta/report.txt ]; then
            cat /usr/pbulk/bulklog/meta/report.txt
          else
            echo "No report.txt found"
          fi
          
          echo ""
          echo "=== Built Packages ==="
          find /usr/pkg/packages -name "*.tgz" -o -name "*.tar.gz" || echo "No packages found"
          
          echo ""
          echo "=== Disk Usage ==="
          du -sh /usr/pkg/packages 2>/dev/null || true
          du -sh /tmp/pkgsrc-build 2>/dev/null || true

      - name: Collect built packages
        if: always()
        run: |
          mkdir -p /tmp/artifacts/${{ matrix.category }}
          
          # Copy built packages
          if [ -d /usr/pkg/packages ]; then
            sudo rsync -av /usr/pkg/packages/ /tmp/artifacts/${{ matrix.category }}/ || true
          fi
          
          # Copy build logs if available
          if [ -d /usr/pbulk/bulklog ]; then
            sudo rsync -av /usr/pbulk/bulklog/ /tmp/artifacts/${{ matrix.category }}/bulklog/ || true
          fi
          
          # Make artifacts readable
          sudo chmod -R a+r /tmp/artifacts/${{ matrix.category }}

      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pkgsrc-${{ matrix.category }}
          path: /tmp/artifacts/${{ matrix.category }}
          